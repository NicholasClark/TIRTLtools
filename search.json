[{"path":"https://nicholasclark.github.io/TIRTLtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 TIRTLtools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/articles/TIRTLtools.html","id":"option-1-install-directly-from-github","dir":"Articles","previous_headings":"Installation","what":"Option 1: Install directly from GitHub","title":"Quickstart","text":"","code":"# install.packages(\"remotes\") ## Run if you need to install the 'remotes' package remotes::install_github(\"NicholasClark/TIRTLtools\") library(TIRLTtools)"},{"path":"https://nicholasclark.github.io/TIRTLtools/articles/TIRTLtools.html","id":"option-2-advanced-download-to-local-folder-and-load-using-devtools","dir":"Articles","previous_headings":"Installation","what":"Option 2: (advanced) Download to local folder and load using ‘devtools’","title":"Quickstart","text":"Run following line terminal download git repository. Load package local folder R","code":"git clone https://github.com/NicholasClark/TIRTLtools.git # install.packages(\"devtools\") ## Run if you need to install the 'devtools' package devtools::load_all(\"./TIRTLtools\") ### location of cloned repo on your machine"},{"path":"https://nicholasclark.github.io/TIRTLtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Clark. Author, maintainer. Mikhail Pogorelyy. Author.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clark N, Pogorelyy M (2025). TIRTLtools: Analysis Tools TIRTLseq Data. R package version 0.1.0, https://nicholasclark.github.io/TIRTLtools/.","code":"@Manual{,   title = {TIRTLtools: Analysis Tools for TIRTLseq Data},   author = {Nicholas Clark and Mikhail Pogorelyy},   year = {2025},   note = {R package version 0.1.0},   url = {https://nicholasclark.github.io/TIRTLtools/}, }"},{"path":"https://nicholasclark.github.io/TIRTLtools/index.html","id":"tirtltools-r-package","dir":"","previous_headings":"","what":"Analysis Tools for TIRTLseq Data","title":"Analysis Tools for TIRTLseq Data","text":"Package active development may change frequently.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analysis Tools for TIRTLseq Data","text":"TIRTLtools suite tools analyzing T-cell receptor (TCR) repertoires created using TIRTL-seq (Throughput-Intensive Rapid TCR Library sequencing) (Pogorelyy Kirk et al., bioRxiv 2024). provide functions analysis paired TCR repertoires well single-chain bulk data. addition various analysis plotting functions, provide efficient batched GPU implementation TCRdist (Dash et al., Nature 2017) works NVIDIA Apple Silicon GPUs. testing, able calculate pairwise TCRdist repertoire ~1 million TCRs hours using MacBook Pro (16-core GPU, M4 Pro).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis Tools for TIRTLseq Data","text":"Instructions install TIRTLtools.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Analysis Tools for TIRTLseq Data","text":"details pairing pipeline, see TIRTLseq preprint (Pogorelyy Kirk et al.) github repository. details MAD-HYPE algorithm, see Holec Berleant et al., 2019. details MiXCR, see website publications Nature Methods (2015) Nature Biotechnology (2017). details TCRdist, see Dash et al., Nature 2017","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":null,"dir":"Reference","previous_headings":"","what":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"efficient, batched version TCRdist compatible NVIDIA Apple Silicon GPUs.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"","code":"TCRdist(   tcr1,   tcr2 = NULL,   remove_MAIT = FALSE,   params = NULL,   submat = NULL,   tcrdist_cutoff = 90,   chunk_size = 1000,   print_chunk_size = 10,   print_res = TRUE,   only_lower_tri = TRUE,   return_data = TRUE,   write_to_tsv = FALSE )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"tcr1 data frame one TCR per row. must columns \"va\", \"vb\", \"cdr3a\", \"cdr3b\" tcr2 (optional) another data frame TCRs. supplied, TCRdist calculated every combination one TCR tcr1 one TCR tcr2. Otherwise, calculate TCRdist every pair TCRs tcr1. params (optional) table valid parameters amino acids va/vb segments. (default NULL, uses TIRTLtools::params) submat (optional) substitution matrix mismatch penalties combination amino acids va/vb segments (default NULL, uses TIRTLtools::submat). tcrdist_cutoff (optional) discard TCRdist values cutoff (default 90). chunk_size (optional) chunk size use calculation TCRdist (default 1000). set n, calculate pairwise TCRdist n x n TCRs . may high allowable GPU memory (testing, chunk_size 1000 5000 provided fastest runtime chunk_size 7500 resulted memory errors GPUs). print_chunk_size (optional) print line output every n TCRs processed (default 1000) print_res (optional) print summary results (default TRUE) only_lower_tri (optional) return one TCRdist value pair (like lower triangle symmetric matrix). Default TRUE. return_data (optional) whether return output result function. large data may desirable write result disk instead. (default TRUE, returns output) write_tsv (optional) write results tab-separated file \".tsv\" (default FALSE, write .tsv file)","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"list entries: $TCRdist_df - data frame three columns: \"edge1_0index\", \"edge2_0index\", \"TCRdist\". first two columns contain indices (0-indexed) TCRs pair. last column contains TCRdist cutoff. output sparse contains pairs TCRdist <= cutoff. $tcr1 - data frame TCRs supplied function. contains additional column \"tcr_index\" (0-indexed) index TCR. $tcr2 - similar data frame tcr2, supplied.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"function calculates pairwise TCRdist (Dash et al., Nature 2017) set TCRs (two sets TCRs) returns sparse output TCRdist indices pairs TCRdist less equal desired cutoff (default cutoff 90). function uses reticulate package call python script uses cupy (NVIDIA GPUs), mlx (Apple Silicon GPUs), numpy (GPU) calculate TCRdist efficiently.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GPU implementation of TCRdist, a distance/similarity metric for pairs of TCRs — TCRdist","text":"","code":"# example code # data = load_tirtlseq(\"your_directory/\") # df = get_all_tcrs(data, chain=\"paired\", remove_duplicates = TRUE) # out = TCRdist(df, tcrdist_cutoff = 90)"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelized C++ implementation of TCRdist (no GPU required) — TCRdist_cpp","text":"","code":"TCRdist_cpp(tcr1, tcr2 = NULL)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TCRdist_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelized C++ implementation of TCRdist (no GPU required) — TCRdist_cpp","text":"tcr1 data frame one TCR per row. must columns \"va\", \"vb\", \"cdr3a\", \"cdr3b\" tcr2 (optional) another data frame TCRs. supplied, TCRdist calculated every combination one TCR tcr1 one TCR tcr2. Otherwise, calculate TCRdist every pair TCRs tcr1.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TIRTL_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Run data processing functions on a TIRTLseqData object — TIRTL_process","title":"Run data processing functions on a TIRTLseqData object — TIRTL_process","text":"function runs annotation data cleaning functions TIRTLseqData object. Specifically, calls functions add_single_chain_data(), identify_paired(), identify_non_functional_seqs(), (optionally) clean_pairs().","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TIRTL_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run data processing functions on a TIRTLseqData object — TIRTL_process","text":"","code":"TIRTL_process(data, clean = FALSE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TIRTL_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run data processing functions on a TIRTLseqData object — TIRTL_process","text":"data TIRTLseqData object clean (optional) TRUE/FALSE value, whether \"clean\" paired data removing excess pairs individual alpha beta chains (default FALSE).","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TIRTLtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"TIRTLtools: Analysis Tools for TIRTLseq Data — TIRTLtools-package","title":"TIRTLtools: Analysis Tools for TIRTLseq Data — TIRTLtools-package","text":"suite tools analyzing paired T-cell receptor (TCR) datasets created using TIRTL-seq. Contains efficient GPU implementation TCRdist (Dash et al., Nature 2017).","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/TIRTLtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"TIRTLtools: Analysis Tools for TIRTLseq Data — TIRTLtools-package","text":"Maintainer: Nicholas Clark Nicholas.Clark@STJUDE.ORG Authors: Mikhail Pogorelyy Mikhail.Pogorelyy@STJUDE.ORG","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata to a TIRTLseqData object — add_metadata","title":"Add metadata to a TIRTLseqData object — add_metadata","text":"Add metadata TIRTLseqData object","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata to a TIRTLseqData object — add_metadata","text":"","code":"add_metadata(obj, meta_columns = NULL, sep = \"_\")"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata to a TIRTLseqData object — add_metadata","text":"obj TIRTLseqData object meta_columns (optional) vector names metadata field sample names. sep (optional) character separating fields sample names data example c(\"marker\", \"timepoint\", \"donor\") samples named something like \"cd8_timepoint2_donor1\".","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_single_chain_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","title":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","text":"add_single_chain_data() function adds read counts proportions single-chain pseudobulk data paired data frame sample dataset.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_single_chain_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","text":"","code":"add_single_chain_data(data, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_single_chain_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","text":"data TIRTLseq dataset created load_tirtlseq() verbose (optional) whether print progress function (default TRUE).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_single_chain_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","text":"TIRTLseq dataset object paired data frames sample added columns read counts proportions single-chain pseudobulk data.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/add_single_chain_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add single-chain read counts/fractions to the paired TCR data — add_single_chain_data","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TCR repertoire diversity metrics — calculate_diversity","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"calculate_diversity() returns number clonal diversity measures (e.g. Hill numbers, Shannon Simpson indices) calculated supplied data.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"","code":"calculate_diversity(   data,   chain = c(\"beta\", \"alpha\"),   metrics = get_all_div_metrics(),   samples = NULL,   q = 0:6,   percent = seq(10, 90, 10),   n = 10 )  diversity(...)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"data TIRTLseqData object chain chain use calculating metrics, alpha beta (default \"beta\") metrics diversity indices metrics calculate. samples samples calculate diversity metrics (default NULL, samples) q vector integers specifying \"orders\" calculate Hill numbers Renyi entropy. percent percentage (100) vector percentages use calculating dXX values, .e. minimum number clones needed cover XX percent sample. n number frequent clones use topNfraction metric.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"returns list requested indices. \"simpson\", \"gini\", \"gini.simpson\", \"inv.simpson\", \"shannon\", \"berger.parker\", \"richness\" return vector length one. \"d50\" \"dXX\" return data frame minimum number clones needed make 50 (XX) percent data, percentage (50 XX) supplied, actual percentage data made clones. \"dXX\" may return data frame many rows supplied vector percentages. \"renyi\" \"hill\" return data frame two columns, row contains value Hill (Renyi) number order 'q', contains value corresponding 'q'. return data frame many rows supplied vector orders (e.g. 1:5).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"function calculates following diversity indices: simpson - Simpson diversity index (https://en.wikipedia.org/wiki/Diversity_index#Simpson_index). equals probability two entities taken random dataset represent type. inverse Hill number order 2. gini - Gini index/coefficient... (https://en.wikipedia.org/wiki/Gini_coefficient). gini.simpson - Gini-Simpson index (https://en.wikipedia.org/wiki/Diversity_index#Gini%E2%80%93Simpson_index). Equal 1-Simpson_index. equals probability two entities taken random dataset represent different types. inv.simpson - Inverse-Simpson index - .e. reciprocal Simpson index, measures effective number types weighted arithmetic mean used calculate diversity. equivalent Hill number order 2. (https://en.wikipedia.org/wiki/Diversity_index#Inverse_Simpson_index) shannon - Shannon diversity index, also known Shannon-Wiener index Shannon entropy. equivalent Renyi entropy 'q' = 1. (https://en.wikipedia.org/wiki/Diversity_index#Shannon_index) berger.parker - Berger-Parker index, .e. proportion abundant type dataset. (https://en.wikipedia.org/wiki/Diversity_index#Berger%E2%80%93Parker_index) richness - species richness, .e. total number unique types observed data (https://en.wikipedia.org/wiki/Diversity_index#Richness). d50 - minimum number types (clones) needed comprise 50 percent data. dXX - minimum number types (clones) needed comprise XX percent data. renyi - Renyi entropy, generalization Shannon diversity/entropy values 'q' 1. formula Renyi entropy undefined q=1, defined limit, equals Shannon entropy. q=0, simply natural logarithm richness total number types. q=Inf, defined limit, equal negative natural logarithm proportion abundant type. (https://en.wikipedia.org/wiki/Diversity_index#R%C3%A9nyi_entropy) hill - Hill numbers order q, also known true diversity effective number types. number equally abundant types needed average proportional abundance types equal observed dataset. order 'q' defines exponent used formula define 'generalized mean' proportional abundances. q = 2 corresponds arithmetic mean (https://en.wikipedia.org/wiki/Arithmetic_mean). q = 1 corresponds geometric mean (https://en.wikipedia.org/wiki/Geometric_mean). q = 0 corresponds harmonic mean (https://en.wikipedia.org/wiki/Harmonic_mean). q = Inf, defined limit, inverse proportion abundant type. general, q increases, less weight given rarer species. (https://en.wikipedia.org/wiki/Diversity_index#Effective_number_of_species_or_Hill_numbers)","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/calculate_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TCR repertoire diversity metrics — calculate_diversity","text":"","code":"# example here # data = load_tirtlseq(\"your_directory/\") # div = calculate_diversity(data)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove excess pairs for individual single chains — clean_pairs","title":"Remove excess pairs for individual single chains — clean_pairs","text":"function filters paired TCR data, keeping one beta-chain partner individual alpha-chain two alpha-chain partners individual beta-chain.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove excess pairs for individual single chains — clean_pairs","text":"","code":"clean_pairs(data, n_max_alpha = 2, n_max_beta = 1, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove excess pairs for individual single chains — clean_pairs","text":"data TIRTLseqData object n_max_alpha (optional) maximum number alpha chains allowed paired individual beta chain (default 2) n_max_beta (optional) maximum number beta chains allowed paired individual alpha chain (default 1) verbose (optional) whether print progress function (default TRUE).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_pairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove excess pairs for individual single chains — clean_pairs","text":"Excess partners individual chain often sequencing errors true partner. sequencing error-derived chains often share V/J segment true partner, found much lower read fractions. heuristic, mitigate phenomenon, unique beta chain group partner alpha chains V/J segments keep alpha chains highest read fraction group. remaining alpha chain partners, keep two chains (can changed n_max_alpha) highest read fractions. go similar process unique alpha chain, grouping partner beta chains V/J segments. However, keep one beta chain (can changed n_max_beta).","code":""},{"path":[]},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_scTIRTLseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imputes missing alpha and beta chains where possible for single-cell TIRTLseq data — clean_scTIRTLseq","text":"","code":"clean_scTIRTLseq(df, verbose = TRUE, keep_all_columns = FALSE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/clean_scTIRTLseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imputes missing alpha and beta chains where possible for single-cell TIRTLseq data — clean_scTIRTLseq","text":"df data frame single-cell TIRTLseq data verbose print summary clonotypes (default TRUE) keep_all_columns keep intermediate columns created function (default FALSE)","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"cluster_tcrs() function aggregates paired TCRs found data, calculates pairwise similarity using va, vb, cdr3a, cdr3b regions (via TCRdist), clusters results using Leiden algorithm.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"","code":"cluster_tcrs(   data,   tcrdist_cutoff = 90,   resolution = 0.1,   with_db = TRUE,   db = TIRTLtools::vdj_db,   allow_self_edges = TRUE,   remove_MAIT = TRUE )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"data list TIRTLseq TCR data samples created load_tirtlseq() tcrdist_cutoff TCRdist() function record TCRdist values less equal cutoff. Default 90. Note: Higher cutoffs return data, NxN N number unique TCRs. resolution \"resolution\" parameter Leiden algorithm. lower value produce larger clusters higher value produce smaller clusters. Typical values 0.1 - 2.0 range. higher value may better densely connected data lower value may better moderately connected data. Default 0.1. with_db TRUE, observed clones compared clustered dataframe annotated clones. default, dataframe VDJ-db annotations used. db data frame annotated TCRs. default VDJ-db database. allow_self_edges FALSE, calculate TCRdist input data TCRs TCR annotation database (db). TRUE, calculate pairwise TCRdist data including input annotated TCRs. remove_MAIT remove MAIT TCRs clustering (default TRUE)","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"Returns list following elements: $df - data frame unique TCRs along cluster annotations $dist_df - data frame distances (TCRdist) TCR pairs long format $sparse_adj_mat - adjacency matrix (sparse format) marking TCR pairs TCRdist <= tcrdist_cutoff $graph_adj - igraph object created adjacency matrix $tcrdist_cutoff - cutoff used TCRdist $resolution - resolution parameter used Leiden algorithm","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"function also filters dataset TCRs valid TCRdist. following TCRs removed: TCRs contain stop codons (*) frame shifts (_) cdr3a cdr3b regions TCRs contain cdr3 region 5 less amino acids TCRs contain v segment allele found parameter table V-segments specify allele (e.g. \"TRAV1-2\" instead \"TRAV1-2*01\") assigned \"*01\" allele.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/cluster_tcrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster TCRs (using the Leiden algorithm) based on their pairwise TCRdist values — cluster_tcrs","text":"","code":"# example code # paired = load_tirtlseq(\"your_directory/\") # obj = cluster_tcrs(paired)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/create_thimble_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert paired TCRs to a ","title":"Convert paired TCRs to a ","text":"Convert paired TCRs \"thimble\" data frame stitching together TCR nucleotide coding sequences Stitchr Python package","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/create_thimble_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert paired TCRs to a ","text":"","code":"create_thimble_df(   df,   preset = c(\"default\", \"none\"),   TCR_names = \"TCR\",   exclude_non_functional = TRUE,   remove_duplicates = TRUE,   verbose = TRUE,   Linker = NULL,   Link_order = NULL,   TRAC = NULL,   TRBC = NULL,   TRA_leader = NULL,   TRB_leader = NULL,   TRA_5_prime_seq = NULL,   TRA_3_prime_seq = NULL,   TRB_5_prime_seq = NULL,   TRB_3_prime_seq = NULL )"},{"path":[]},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/download_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download TIRTLseq datasets — download_dataset","text":"","code":"download_dataset(dataset = \"SJTRC_TIRTLseq_minimal\", folder = tempdir())"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/download_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download TIRTLseq datasets — download_dataset","text":"dataset TIRTLseq dataset download","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a TIRTLseqData object — filter_dataset","title":"Subset a TIRTLseqData object — filter_dataset","text":"filter_dataset() function used select subset samples loaded TIRTLseq dataset create new dataset object.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a TIRTLseqData object — filter_dataset","text":"","code":"filter_dataset(data, samples)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a TIRTLseqData object — filter_dataset","text":"data TIRTLseqData object created load_tirtlseq() samples selected samples. Either 1) numeric vector indices, 2) character vector sample names, 3) character vector metadata conditions entry form \"column==value\".","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a TIRTLseqData object — filter_dataset","text":"dataset object similar created load_tirtlseq(), selected samples.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset a TIRTLseqData object — filter_dataset","text":"function accepts 1) numeric vector indices, 2) character vector sample names, 3) character vector metadata conditions entry form \"column==value\". third case, c(\"cell_type==cd4\", \"timepoint==tp2\") , example, select samples whose cell_type cd4 whose timepoint tp2 sample metadata.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a TIRTLseqData object — filter_dataset","text":"","code":"# example code # paired = load_tirtlseq(\"path_to/your_directory\", sep = \"_\", meta_columns = c(\"cell_type\", \"timepoint\")) # p2 = filter_dataset(paired, 1:3) ### by indices # p3 = filter_dataset(paired, c(\"cd8_tp1_v2\", \"cd8_tp2_v2\", \"cd8_tp3_v2\")) ### by sample names # p4 = filter_dataset(paired, \"cell_type==cd4\") ### by sample metadata condition # p5 = filter_dataset(paired, c(\"cell_type==cd4\", \"timepoint==tp2\")) ### by multiple sample metadata conditions"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_mait.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove MAIT (Mucosal-Associated Invariant T cells) TCRs — filter_mait","title":"Remove MAIT (Mucosal-Associated Invariant T cells) TCRs — filter_mait","text":"Remove MAIT (Mucosal-Associated Invariant T cells) TCRs","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_mait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove MAIT (Mucosal-Associated Invariant T cells) TCRs — filter_mait","text":"","code":"filter_mait(df, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_mait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove MAIT (Mucosal-Associated Invariant T cells) TCRs — filter_mait","text":"df data frame paired TCRs verbose whether print number MAIT TCRs removed","code":""},{"path":[]},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/filter_well_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rare clones from well-level TIRTLseq data — filter_well_data","text":"","code":"filter_well_data(well_data_df, min_fraction = 1e-06)"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_div_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns all diversity metric options for calculate_diversity() — get_all_div_metrics","title":"Returns all diversity metric options for calculate_diversity() — get_all_div_metrics","text":"Returns diversity metric options calculate_diversity()","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_div_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns all diversity metric options for calculate_diversity() — get_all_div_metrics","text":"","code":"get_all_div_metrics()"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_div_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns all diversity metric options for calculate_diversity() — get_all_div_metrics","text":"vector available diversity metrics calculate_diversity() function.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_div_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns all diversity metric options for calculate_diversity() — get_all_div_metrics","text":"","code":"# example code get_all_div_metrics() #>  [1] \"simpson\"        \"gini\"           \"gini.simpson\"   \"inv.simpson\"    #>  [5] \"shannon\"        \"berger.parker\"  \"richness\"       \"d50\"            #>  [9] \"dXX\"            \"renyi\"          \"hill\"           \"top10fraction\"  #> [13] \"top100fraction\" \"topNfraction\""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"get_all_tcrs() function aggregates TCRs samples dataset puts one table.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"","code":"get_all_tcrs(   data,   chain = c(\"paired\", \"alpha\", \"beta\"),   remove_duplicates = TRUE )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"data TIRTLseqData object created load_tirtlseq() chain TCR chain, \"alpha\", \"beta\", \"paired\" (default paired) remove_duplicates return one TCR TCRs paired T-SHELL MAD-HYPE algorithms (default TRUE).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"dataframe including TCRs dataset.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"pair TCRs included twice TIRTLseq data recognized T-SHELL MAD-HYPE algorithms. remove_duplicates TRUE (default) function return one pairs TCRs.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_all_tcrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns all of the paired TCRs from all samples in a dataset — get_all_tcrs","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_pair_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of single-chains that were paired by each algorithm — get_pair_stats","title":"Count the number of single-chains that were paired by each algorithm — get_pair_stats","text":"Count number single-chains paired algorithm","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_pair_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of single-chains that were paired by each algorithm — get_pair_stats","text":"","code":"get_pair_stats(data, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_pair_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of single-chains that were paired by each algorithm — get_pair_stats","text":"data TIRTLseqData object verbose (optional) whether print progress function (default TRUE).","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_paired_by_read_fraction_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number and fraction of single chains that were paired within different read fraction ranges — get_paired_by_read_fraction_range","title":"Calculate the number and fraction of single chains that were paired within different read fraction ranges — get_paired_by_read_fraction_range","text":"Calculate number fraction single chains paired within different read fraction ranges","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_paired_by_read_fraction_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number and fraction of single chains that were paired within different read fraction ranges — get_paired_by_read_fraction_range","text":"","code":"get_paired_by_read_fraction_range(   data,   chain = c(\"beta\", \"alpha\"),   cutoffs = 10^(-6:-1) )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_paired_by_read_fraction_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number and fraction of single chains that were paired within different read fraction ranges — get_paired_by_read_fraction_range","text":"data TIRTLseqData object chain TCR chain use read fraction (default \"beta\") cutoffs vector cutoffs read fraction ranges","code":""},{"path":[]},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_well_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get well names from numerical rows and columns — get_well_subset","text":"","code":"get_well_subset(row_range = 1:16, col_range = 1:24)"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_wells_from_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get well names from top left and bottom right wells — get_wells_from_edges","title":"Get well names from top left and bottom right wells — get_wells_from_edges","text":"Get well names top left bottom right wells","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/get_wells_from_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get well names from top left and bottom right wells — get_wells_from_edges","text":"","code":"get_wells_from_edges(   top_left,   bottom_right,   return_type = c(\"wells\", \"rows_and_columns\") )"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_non_functional_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","title":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","text":"identify_non_functional_seqs() identifies CDR3 nucleotide sequences data contain either stop codons (*) frame shifts (_) indicate non-functional protein product.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_non_functional_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","text":"","code":"identify_non_functional_seqs(data)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_non_functional_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","text":"data TIRTLseqData object","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_non_functional_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","text":"TIRTLseqData object modified pseudobulk paired data frames sample. dataframe ouptut object added columns identify whether CDR3 alpha beta nucleotide sequences contain stop codons (*) frame shifts (_) indicate non-functional chain. column is_functional TRUE neither chain stop codon frame shift. columns has_stop_codon has_frameshift similar, specific kind coding error. columns identify alpha chain beta chain stop codon frameshift, functional.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_non_functional_seqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify TCRs that contain non-functional CDR3 sequences — identify_non_functional_seqs","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_paired.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify which single chains were paired — identify_paired","title":"Identify which single chains were paired — identify_paired","text":"sample dataset, identify_paired() annotates alpha beta pseudobulk data number distinct pairs chain part paired data well TRUE/FALSE column indicating whether chain paired partners.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_paired.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify which single chains were paired — identify_paired","text":"","code":"identify_paired(data, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_paired.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify which single chains were paired — identify_paired","text":"data TIRTLseq dataset created load_tirtlseq() verbose (optional) whether print progress function (default TRUE).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_paired.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify which single chains were paired — identify_paired","text":"dataset similar created load_tirtlseq(), added columns is_paired n_paired alpha beta pseudobulk data frames. is_paired TRUE chain found paired data. n_paired number distinct chains particular chain paired .","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/identify_paired.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify which single chains were paired — identify_paired","text":"","code":"# example code # paired = load_tirtlseq(\"path_to/your_directory\", sep = \"_\", meta_columns = c(\"cell_type\", \"timepoint\")) # paired = identify_paired(paired)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Load data from TIRTLseq experiments — load_tirtlseq","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"load_tirtlseq() loads paired-TCR pseudo-bulk data TIRTLseq experiments given directory. can also automatically assemble metadata filenames.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"","code":"load_tirtlseq(   directory,   chain = c(\"all\", \"paired\", \"alpha\", \"beta\"),   sep = \"_\",   meta_columns = NULL,   samples = NULL,   pseudobulk_columns = \"auto\",   paired_columns = \"auto\",   n_threads = data.table::getDTthreads(),   compress_strings = FALSE,   verbose = TRUE,   stringsAsFactors = FALSE,   n_max = Inf )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"directory directory look \".tsv\" \".tsv.gz\" files TIRTLseq data chain TCR chain data load data – \"\" chains (alpha, beta, paired) default. sep (optional) separator filename metadata information (\"_\" default) meta_columns (optional) vector names identifying metadata contained filenames, example c(\"marker\", \"timepoint\", \"donor\") files named something like \"cd8_timepoint2_donor1 ... .tsv\". samples (optional) specific sample ids (part filename \"_pseudobulk\" \"_TIRTLoutput\") load. Default NULL (loads samples directory). pseudobulk_columns (optional) columns pseudobulk .tsv(.gz) read. Either list columns one \"auto\", \"\", \"minimal\". \"auto\" (default) loads columns except redundant ones. \"\" loads columns. \"minimal\" loads small number important columns. paired_columns (optional) columns paired .tsv(.gz) read. Either list columns one \"auto\", \"\", \"minimal\". \"auto\" (default) loads columns except redundant ones. \"\" loads columns. \"minimal\" loads small number important columns. n_threads (optional) number CPU threads use reading .tsv(.gz) files compress_strings (optional) whether compress nucleotide amino acid sequences using Biostrings package. verbose (optional) whether print name file loaded (default TRUE). stringsAsFactors (optional) read character strings factors n_max (optional) maximum number files read – used mostly testing purposes (default Inf, .e. read files).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"function returns list two objects: $meta - metadata table (data frame) $data - list one entry sample. entry list entries $alpha, $beta, $paired, data frames alpha- beta-chain pseudo-bulk data paired data respectively.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"function expects \".tsv\" (\".tsv.gz\") files. looks files ending \"_pseudobulk_TRA.tsv\" (alpha-chain pseudo-bulk), \"_pseudobulk_TRB.tsv\" (beta-chain pseudo-bulk), \"_TIRTLoutput.tsv\" (paired alpha beta chains). default, function construct metadata table row sample, based unique strings beginning filenames (\"_TIRTLoutput.tsv\" similar). filename contains sample metadata, can add multiple columns metadata table information. example, typical file looks like \"cd8_timepoint2_donor1_TIRTLoutput.tsv\" user supplies c(\"cell_type\", \"timepoint\", \"donor\") meta_columns \"_\" sep, metadata table look like something like :","code":"sample_id             cell_type   timepoint       donor     label      <chr>               <chr>         <chr>         <chr>     <chr> 1 cd8_timepoint2_donor1    cd8       timepoint2      donor1    cell_type: cd8 | timepoint: timepoint2 | donor: donor1 2 ... 3 cd4_timepoint1_donor3    cd4       timepoint1      donor3    cell_type: cd4 | timepoint: timepoint1 | donor: donor3"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_tirtlseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load data from TIRTLseq experiments — load_tirtlseq","text":"","code":"if (FALSE) { # \\dontrun{ paired = load_tirtlseq(\"path_to/your_directory\", sep = \"_\", meta_columns = c(\"cell_type\", \"timepoint\")) } # }"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_well_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load well-level TIRTLseq data — load_well_data","title":"Load well-level TIRTLseq data — load_well_data","text":"Load well-level TIRTLseq data","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_well_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load well-level TIRTLseq data — load_well_data","text":"","code":"load_well_data(   folder_path,   wells = get_well_subset(1:16, 1:24),   well_pos = 3,   chain = c(\"both\", \"alpha\", \"beta\"),   nproc = 1L,   columns = NULL,   max_files = Inf )"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_well_data_to_sparse_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Load well-level TIRTLseq data to sparse matrices — load_well_data_to_sparse_multi","title":"Load well-level TIRTLseq data to sparse matrices — load_well_data_to_sparse_multi","text":"Load well-level TIRTLseq data sparse matrices","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/load_well_data_to_sparse_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load well-level TIRTLseq data to sparse matrices — load_well_data_to_sparse_multi","text":"","code":"load_well_data_to_sparse_multi(   folder_path_list,   sample_names_list,   wells_list,   well_pos_list,   chain = c(\"alpha\", \"beta\"),   nproc = 1L,   columns = NULL,   max_files = Inf )"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of permissible amino acids and V-segments for TCRdist — params","title":"Table of permissible amino acids and V-segments for TCRdist — params","text":"Table permissible amino acids V-segments TCRdist","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of permissible amino acids and V-segments for TCRdist — params","text":"","code":"params"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of permissible amino acids and V-segments for TCRdist — params","text":"data frame two columns. first column called \"feature\" contains TCR V-segments (e.g. \"TRAV12-1*02\") one-letter abbreviations amino acids. second column called \"value\" contains row/column index substitution matrix corresponding amino acid V-segment. Note first row/column 0 (instead 1) TCRdist code Python, 0-indexed.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clone_size_across_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Line plot of clone read fraction across multiple samples — plot_clone_size_across_samples","title":"Line plot of clone read fraction across multiple samples — plot_clone_size_across_samples","text":"Line plot clone read fraction across multiple samples","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clone_size_across_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line plot of clone read fraction across multiple samples — plot_clone_size_across_samples","text":"","code":"plot_clone_size_across_samples(   data,   clones,   chain = c(\"beta\", \"alpha\"),   pseudo = 1e-06,   group_vec = NULL,   sum_readFraction = TRUE,   samples = NULL,   return_data = FALSE,   label_zero = FALSE,   show_legend = TRUE,   log_scale = TRUE,   x_var = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clone_size_across_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line plot of clone read fraction across multiple samples — plot_clone_size_across_samples","text":"data TIRTLseqData object clones list nucleotide sequences TCR clones chain TCR chain used (default \"beta\") pseudo value pseudocount added read fractions (default 10^-6) group_vec (optional) vector \"groups\" clones sum_readFraction TRUE, plot sum read fractions clones group. FALSE, plot clone separate line. samples (optional) samples use plot (default samples) return_data whether return data used plotting (default FALSE) label_zero whether label zero y-axis (default FALSE) show_legend whether show legend (default TRUE) log_scale (optional) TRUE, use log-scale y-axis (default FALSE)","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clonotype_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","title":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","text":"plot_clonotype_indices() creates stacked bar chart containing fraction reads top 10 frequent clonotypes, 11th 100th frequent clonotypes, 101st 1000th frequent, , sample dataset.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clonotype_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","text":"","code":"plot_clonotype_indices(   data,   chain = c(\"beta\", \"alpha\"),   cutoffs = 10^(1:5),   group_col = NULL,   label_col = \"Sample\",   flip = FALSE,   return_data = FALSE,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clonotype_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","text":"data TIRTLseqData object chain TCR chain use (default \"beta\") cutoffs indices used end group bar chart. default 10^(1:5), .e. 10th -frequent clone, 100th -frequent clone, 1,000th, 10,000th, 100,000th. group_col (optional) supplied, column metadata used group samples label_col (optional) labels samples flip (optional) TRUE, flip x y-axes (default FALSE) return_data (optional) TRUE, return data used make plot (default FALSE) color_scheme (optional) color scheme use","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clonotype_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","text":"(default) Returns stacked bar chart relative frequencies -frequent clonotypes. return_data TRUE, data frame used create plot returned instead.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clonotype_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked bar chart with fractions of reads attributed to the most frequent clonotypes — plot_clonotype_indices","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clusters of similar TCRs — plot_clusters","title":"Plot clusters of similar TCRs — plot_clusters","text":"plot_clusters() plots TCRs previously clustered cluster_tcrs() function.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clusters of similar TCRs — plot_clusters","text":"","code":"plot_clusters(   obj,   n_clusters = 10,   seed = 1234,   annotation_cols = c(\"cluster\", \"source\"),   color_col = \"cluster\" )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clusters of similar TCRs — plot_clusters","text":"obj object returned cluster_tcrs() function n_clusters number clusters plot (default 10) seed number use seed. Using number across multiple runs allows reproducible results. annotation_cols columns use heatmap annotations (default cluster source, .e. data vdj-db) color_col column use color nodes network visualization (default \"cluster\")","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clusters of similar TCRs — plot_clusters","text":"Currently returns list three items: $umap - umap visualization TCRs top clusters $graph - graph/network visualization TCRs top clusters $heatmap - heatmap visualization TCRs top clusters","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clusters of similar TCRs — plot_clusters","text":"function currently returns list UMAP plot, graph/network plot, heatmap.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clusters of similar TCRs — plot_clusters","text":"","code":"# example code # paired = load_tirtlseq(\"your_directory/\") # obj = cluster_tcrs(paired) # plot_clusters(obj)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of clonal diversity metrics — plot_diversity","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"plot_diversity() plots requested clonal diversity metric","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"","code":"plot_diversity(   div,   metric = get_all_div_metrics(),   q = 2,   percent = 90,   group_col = NULL,   label_col = \"Sample\",   flip = FALSE,   facet = FALSE,   log_scale = FALSE,   samples = NULL,   return_data = FALSE,   color_scheme = NULL,   x_var = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"div list created diversity() function diversity metrics sample metric diversity metric use (e.g. shannon, simpson, etc.) q (optional) 'renyi' 'hill' metrics, order q diversity index percent (optional) 'dXX' metric, percentage 'XX' 0 100 group_col (optional) supplied, column metadata used group samples label_col (optional) labels samples flip (optional) TRUE, flip x y-axes (default FALSE) facet (optional) TRUE, plot separate facets, sub-plots group (default FALSE) log_scale (optional) TRUE, use log-scale y-axis (default FALSE) samples (optional) samples include plot (default samples) return_data (optional) TRUE, return data used make plot (default FALSE) color_scheme (optional) color scheme plot x_var (optional) variable show x-axis, \"sample_id\"","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"list two objects: $plot - ggplot object plot requested diversity metric $data - return_data TRUE, data frame used make plot","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"function can plot variety clonal diversity metrics dataset (richness, Simpson diversity index, Shannon-Wiener index, etc.). See get_all_div_metrics() available options. default return barplot one bar sample dataset. grouping column (metadata) supplied, samples grouped bar heights reflect average diversity metric across group, error bars showing standard deviation.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of clonal diversity metrics — plot_diversity","text":"","code":"# example code # data = load_tirtlseq(\"your_directory/\") # div = diversity(data) # plot_diversity(div, metric = \"richness\")"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_n_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of the number of single-chain reads for each sample — plot_n_reads","title":"Bar plot of the number of single-chain reads for each sample — plot_n_reads","text":"Bar plot number single-chain reads sample","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_n_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of the number of single-chain reads for each sample — plot_n_reads","text":"","code":"plot_n_reads(   data,   chain = c(\"both\", \"beta\", \"alpha\"),   samples = NULL,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_n_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of the number of single-chain reads for each sample — plot_n_reads","text":"data TIRTLseqData object chain TCR chain plot (default \"alpha\" \"beta\") samples (optional) samples plot (default samples) color_scheme color scheme plot","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"plot_num_partners() creates bar plots alpha beta chains showing many partners paired MAD-HYPE /T-shell algorithms.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"","code":"plot_num_partners(   data,   group_col = NULL,   fraction = TRUE,   include_non_functional = FALSE,   max_partners = 5,   samples = NULL,   return_data = FALSE,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"data TIRTLseqData object group_col column metadata use group multiple samples one bar plot fraction whether plot fraction chains total number chains (default TRUE, .e. plot fractions) include_non_functional whether include chains non-functional cdr3 sequences tabulating output. max_partners maximum number partners, N, include plots. chains N partners grouped together \">N\" category. samples (optional) samples plot return_data TRUE, return data used make plots color_scheme color scheme use plot","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"Either bar chart (ggplot object) facets (sub-plots) sample list two objects: $plot plot referenced $data data used create plot","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"sample, function creates stacked bar charts alpha beta chains, showing proportion (among called pairs) paired 1 chain, 2 chains, 3 chains, etc.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_num_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked bar plot of the fraction of single-chains with different numbers of partners for each sample — plot_num_partners","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked bar plot of the number alpha/beta chains paired by each pairing algorithm — plot_paired","title":"Stacked bar plot of the number alpha/beta chains paired by each pairing algorithm — plot_paired","text":"Stacked bar plot number alpha/beta chains paired pairing algorithm","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked bar plot of the number alpha/beta chains paired by each pairing algorithm — plot_paired","text":"","code":"plot_paired(   data,   chain = c(\"paired\", \"alpha\", \"beta\"),   samples = NULL,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked bar plot of the number alpha/beta chains paired by each pairing algorithm — plot_paired","text":"data TIRTLseqData object data frame created using get_pair_stats() chain TCR chain plot (default \"paired\") samples (optional) samples include plot (default ) color_scheme (optional) color scheme plot","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_by_read_fraction_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of the fraction of single chains that were paired within different read fraction ranges for each sample. — plot_paired_by_read_fraction_range","title":"Bar plot of the fraction of single chains that were paired within different read fraction ranges for each sample. — plot_paired_by_read_fraction_range","text":"Bar plot fraction single chains paired within different read fraction ranges sample.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_by_read_fraction_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of the fraction of single chains that were paired within different read fraction ranges for each sample. — plot_paired_by_read_fraction_range","text":"","code":"plot_paired_by_read_fraction_range(   data,   chain = c(\"beta\", \"alpha\"),   cutoffs = 10^(-6:-1),   freq = FALSE,   samples = NULL,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_by_read_fraction_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of the fraction of single chains that were paired within different read fraction ranges for each sample. — plot_paired_by_read_fraction_range","text":"data TIRTLseqData object data frame created using get_paired_by_read_fraction_range() chain TCR chain plot (default \"beta\") cutoffs vector cutoffs read fraction ranges freq TRUE, plot number pairs, FALSE plot fraction paired (default FALSE, plot fraction paired) samples (optional) samples include plot color_scheme (optional) color scheme use plot","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_vs_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"A stepped plot of the cumulative number of paired (or unpaired) single-chains for the N most frequent single-chains — plot_paired_vs_rank","title":"A stepped plot of the cumulative number of paired (or unpaired) single-chains for the N most frequent single-chains — plot_paired_vs_rank","text":"stepped plot cumulative number paired (unpaired) single-chains N frequent single-chains","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_vs_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A stepped plot of the cumulative number of paired (or unpaired) single-chains for the N most frequent single-chains — plot_paired_vs_rank","text":"","code":"plot_paired_vs_rank(   data,   sample = 1,   y_axis = c(\"n_not_paired\", \"n_paired\"),   chain = c(\"both\", \"beta\", \"alpha\"),   n_max = 100,   color_scheme = NULL )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_paired_vs_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A stepped plot of the cumulative number of paired (or unpaired) single-chains for the N most frequent single-chains — plot_paired_vs_rank","text":"data TIRTLseqData object sample sample plot y_axis whether plot cumulative number paired un-paired single-chains (default \"n_not_paired\") chain TCR chain plot (default alpha beta) n_max number frequent single-chains plot color_scheme (optional) color scheme plot","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_pairs_with_eachother.html","id":null,"dir":"Reference","previous_headings":"","what":"Point plot of read fraction vs. rank for the N most frequent alpha (left, mirrored) and beta (right) chains with lines between alpha and beta chains indicating a pair and a cross indicating an unpaired single-chain — plot_pairs_with_eachother","title":"Point plot of read fraction vs. rank for the N most frequent alpha (left, mirrored) and beta (right) chains with lines between alpha and beta chains indicating a pair and a cross indicating an unpaired single-chain — plot_pairs_with_eachother","text":"Point plot read fraction vs. rank N frequent alpha (left, mirrored) beta (right) chains lines alpha beta chains indicating pair cross indicating unpaired single-chain","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_pairs_with_eachother.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point plot of read fraction vs. rank for the N most frequent alpha (left, mirrored) and beta (right) chains with lines between alpha and beta chains indicating a pair and a cross indicating an unpaired single-chain — plot_pairs_with_eachother","text":"","code":"plot_pairs_with_eachother(   data,   sample = 1,   n_max = 100,   show_num_partners = FALSE,   color_scheme = NULL )"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Line plot of clonotype rank vs. read fraction for each sample — plot_ranks","title":"Line plot of clonotype rank vs. read fraction for each sample — plot_ranks","text":"plot_ranks() returns line plot TCR rank vs. read fraction given sample.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line plot of clonotype rank vs. read fraction for each sample — plot_ranks","text":"","code":"plot_ranks(   data,   chain = c(\"alpha\", \"beta\"),   column = \"readFraction\",   color_scheme = NULL )  rank_plot(...)"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_read_fraction_vs_pair_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative point plot of read fraction vs. rank for the N most frequent alpha and beta chains, with a cross indicating an unpaired single-chain — plot_read_fraction_vs_pair_status","title":"Alternative point plot of read fraction vs. rank for the N most frequent alpha and beta chains, with a cross indicating an unpaired single-chain — plot_read_fraction_vs_pair_status","text":"Alternative point plot read fraction vs. rank N frequent alpha beta chains, cross indicating unpaired single-chain","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_read_fraction_vs_pair_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative point plot of read fraction vs. rank for the N most frequent alpha and beta chains, with a cross indicating an unpaired single-chain — plot_read_fraction_vs_pair_status","text":"","code":"plot_read_fraction_vs_pair_status(   data,   sample = 1,   chain = c(\"both\", \"beta\", \"alpha\"),   n_max = 100,   show_num_partners = F,   color_scheme = NULL )"},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"plot_sample_overlap() returns heatmap showing overlap frequent TCRs among pairs samples dataset","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"","code":"plot_sample_overlap(   data,   chain = c(\"paired\", \"alpha\", \"beta\"),   n_seq = 200,   show_row_names = FALSE,   show_column_names = FALSE,   label_col = \"Sample\",   title = \"\",   return_data = FALSE,   cluster_rows = TRUE,   cluster_cols = TRUE )  sample_overlap(...)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"data dataset, object loaded using load_tirtlseq() function chain chain plot: either paired alpha-/beta-pseudobulk. (default \"paired\") n_seq number frequent TCR sequences use (default 200) show_row_names whether show row names heatmap (default FALSE) show_column_names whether show column names heatmap (default FALSE) label_col column metadata use labels rows columns (default \"Sample\", uses sample_id) title title heatmap","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"heatmap hierarchically clustered rows columns showing number TCRs shared pair samples, among top N frequent TCRs.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"function takes top N frequent TCRs found dataset (default 200) compares overlap samples.","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the overlap/agreement between samples (in terms of most frequent clones) — plot_sample_overlap","text":"","code":"# example code # data = load_tirtlseq(\"your_directory/\") # plot_sample_overlap(data, chain = \"paired\", n_seq=200)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"plot_sample_vs_sample() returns scatterplot read frequencies TCRs two samples","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"","code":"plot_sample_vs_sample(   data1,   data2,   chain = c(\"beta\", \"alpha\"),   log2fc_cutoff = 3,   sem_cutoff = 2.5,   smooth_sem = c(\"window\", \"none\"),   window_size = 30,   end_window_size = 5,   pseudo1 = 1e-06,   pseudo2 = 1e-06,   labelx = \"Frequency on timepoint 1\",   labely = \"Frequency on timepoint 2\",   return_data = FALSE )"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"data1 list three data frames (alpha, beta, paired) one sample data2 list three data frames (alpha, beta, paired) one sample log2_cutoff log2 fold-change cutoff call TCR - -regulated (default 1.5)","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"scatterplot (ggplot object) read frequencies (proportions), colored whether TCR -regulated, -regulated, neither, given log2 fold-change cutoff.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"function labels TCR -regulated, -regulated, stable, based log2 fold-change cutoff supplied (default 1.5).","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/plot_sample_vs_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot of TCR clone read fraction of clones between two samples — plot_sample_vs_sample","text":"","code":"# example code"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/prep_for_tcrdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare paired TCRs for TCRdist calculation — prep_for_tcrdist","title":"Prepare paired TCRs for TCRdist calculation — prep_for_tcrdist","text":"function prepares paired TCR data frame running TCRdist, adding alleles V-segments (.e. \"*01\") missing removing TCRs unrecognized V-segments non-functional CDR3 sequences.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/prep_for_tcrdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare paired TCRs for TCRdist calculation — prep_for_tcrdist","text":"","code":"prep_for_tcrdist(df, params = NULL, remove_MAIT = TRUE, verbose = TRUE)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/prep_for_tcrdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare paired TCRs for TCRdist calculation — prep_for_tcrdist","text":"df data frame paired TCRs params (optional) data frame permissible amino acids V-segments. default, TIRTLtools::params data frame used. remove_MAIT (optional) whether remove MAIT cells data frame (default TRUE). verbose (optional) whether print progress function (default TRUE).","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes duplicate paired TCRs — remove_duplicates","title":"Removes duplicate paired TCRs — remove_duplicates","text":"default, paired TCRs listed twice paired chain data called T-SHELL MAD-HYPE pairing algorithms. function removes duplicate TCRs returns data frame one pair.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes duplicate paired TCRs — remove_duplicates","text":"","code":"remove_duplicates(data)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes duplicate paired TCRs — remove_duplicates","text":"data either single data frame (paired chain) list data frames","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/reorder_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the order of samples in a TIRTLseqData object — reorder_samples","title":"Change the order of samples in a TIRTLseqData object — reorder_samples","text":"Change order samples TIRTLseqData object","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/reorder_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the order of samples in a TIRTLseqData object — reorder_samples","text":"","code":"reorder_samples(data, samples)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/reorder_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the order of samples in a TIRTLseqData object — reorder_samples","text":"data TIRTLseqData object samples samples 'data', desired order. Either 1) numeric vector indices, 2) character vector sample names, 3) character vector metadata conditions entry form \"column==value\".","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/submat.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution penalty matrix for TCRdist amino acids and V-segments — submat","title":"Substitution penalty matrix for TCRdist amino acids and V-segments — submat","text":"Substitution penalty matrix TCRdist amino acids V-segments","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/submat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution penalty matrix for TCRdist amino acids and V-segments — submat","text":"","code":"submat"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/submat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Substitution penalty matrix for TCRdist amino acids and V-segments — submat","text":"symmetric matrix substitution penalties pairs amino acids V-segments TCRdist calculation. amino acids/V-segments corresponding row/column listed \"params\" table.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary table with number of reads and unique alpha/beta chains observed for each sample — summarize_data","title":"Create a summary table with number of reads and unique alpha/beta chains observed for each sample — summarize_data","text":"Create summary table number reads unique alpha/beta chains observed sample","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary table with number of reads and unique alpha/beta chains observed for each sample — summarize_data","text":"","code":"summarize_data(data)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary table with number of reads and unique alpha/beta chains observed for each sample — summarize_data","text":"data TIRTLseqData object","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_scTIRTLseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize single-cell TIRTLseq data — summarize_scTIRTLseq","title":"Summarize single-cell TIRTLseq data — summarize_scTIRTLseq","text":"Returns summary single-cell TIRTLseq data, printing total number wells data, number wells missing alpha/beta chain, number wells second alpha chain, etc.","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_scTIRTLseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize single-cell TIRTLseq data — summarize_scTIRTLseq","text":"","code":"summarize_scTIRTLseq(df)"},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/summarize_scTIRTLseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize single-cell TIRTLseq data — summarize_scTIRTLseq","text":"df data frame single-cell TIRTLseq data","code":""},{"path":[]},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/write_stitchr_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a tab-separated ","title":"Write a tab-separated ","text":"Write tab-separated \"thimble\" text file use Stitchr","code":""},{"path":"https://nicholasclark.github.io/TIRTLtools/reference/write_stitchr_tsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a tab-separated ","text":"","code":"write_stitchr_tsv(df, output_name, output_folder = \"\")"},{"path":[]}]
